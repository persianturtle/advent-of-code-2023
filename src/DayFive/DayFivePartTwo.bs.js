// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utilities from "../Utilities.bs.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";

var InvalidInput = /* @__PURE__ */Caml_exceptions.create("DayFivePartTwo.InvalidInput");

var seeds = {
  contents: []
};

var ranges = [];

function convertSpaceSeparateNumbersToFloat(string) {
  return string.split(" ").map(function (number) {
              return Belt_Option.getWithDefault(Belt_Float.fromString(number), 0.0);
            });
}

Utilities.input.split("\n\n").forEach(function (line, index) {
      if (index === 0) {
        var data = convertSpaceSeparateNumbersToFloat(Caml_array.get(line.split(": "), 1));
        data.forEach(function (seed, index) {
              if (index % 2 === 0) {
                seeds.contents.push([
                      seed,
                      seed + Caml_array.get(data, index + 1 | 0)
                    ]);
                return ;
              }
              
            });
        return ;
      }
      ranges.push(Caml_array.get(line.split(":\n"), 1).split("\n").filter(function (line) {
                    return line.trim().length > 0;
                  }).map(convertSpaceSeparateNumbersToFloat).map(function (map) {
                if (map.length !== 3) {
                  throw {
                        RE_EXN_ID: InvalidInput,
                        _1: "The input was invalid.",
                        Error: new Error()
                      };
                }
                var a = map[0];
                var b = map[1];
                var c = map[2];
                return [
                        a,
                        b,
                        c
                      ];
              }));
    });

ranges.forEach(function (range) {
      var $$new = [];
      while(seeds.contents.length > 0) {
        var match = Belt_Option.getExn(Caml_option.undefined_to_opt(seeds.contents.pop()));
        var e = match[1];
        var s = match[0];
        var isMatched = {
          contents: false
        };
        range.forEach((function(s,e,isMatched){
            return function (param) {
              var b = param[1];
              var a = param[0];
              var os = Math.max(s, b);
              var oe = Math.min(e, b + param[2]);
              if (os < oe) {
                $$new.push([
                      os - b + a,
                      oe - b + a
                    ]);
                if (os > s) {
                  seeds.contents.push([
                        s,
                        os
                      ]);
                }
                if (e > oe) {
                  seeds.contents.push([
                        oe,
                        e
                      ]);
                }
                isMatched.contents = true;
                return ;
              }
              
            }
            }(s,e,isMatched)));
        if (!isMatched.contents) {
          $$new.push([
                s,
                e
              ]);
        }
        
      };
      seeds.contents = $$new;
    });

console.log(Caml_splice_call.spliceApply(Math.min, [seeds.contents.map(function (param) {
                return param[0];
              })]));

var input = Utilities.input;

var input2 = "seeds: 79 14 55 13\n\nseed-to-soil map:\n50 98 2\n52 50 48\n\nsoil-to-fertilizer map:\n0 15 37\n37 52 2\n39 0 15\n\nfertilizer-to-water map:\n49 53 8\n0 11 42\n42 0 7\n57 7 4\n\nwater-to-light map:\n88 18 7\n18 25 70\n\nlight-to-temperature map:\n45 77 23\n81 45 19\n68 64 13\n\ntemperature-to-humidity map:\n0 69 1\n1 0 69\n\nhumidity-to-location map:\n60 56 37\n56 93 4";

export {
  input ,
  input2 ,
  InvalidInput ,
  seeds ,
  ranges ,
  convertSpaceSeparateNumbersToFloat ,
}
/*  Not a pure module */
