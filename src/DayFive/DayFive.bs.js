// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utilities from "../Utilities.bs.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";

function parseCategory(data) {
  var match = data.split(" ").map(function (number) {
        return Belt_Option.getWithDefault(Belt_Float.fromString(number), 0.0);
      });
  if (match.length !== 3) {
    return [
            0.0,
            0.0,
            0.0
          ];
  }
  var sourceCategory = match[0];
  var destinationCategory = match[1];
  var range = match[2];
  return [
          sourceCategory,
          destinationCategory,
          range
        ];
}

function populateState(param, line) {
  var state = param[1];
  var currentField = param[0];
  var field = line.includes(":") ? Caml_array.get(line.split(":"), 0).trim() : currentField;
  var data = (
      line.includes(":") ? Caml_array.get(line.split(":"), 1) : line
    ).trim();
  var currentField$1;
  switch (field) {
    case "fertilizer-to-water map" :
        if (data.length > 0) {
          state.fertilizerToWater.push(parseCategory(data));
        }
        currentField$1 = "fertilizer-to-water map";
        break;
    case "humidity-to-location map" :
        if (data.length > 0) {
          state.humidityToLocation.push(parseCategory(data));
        }
        currentField$1 = "humidity-to-location map";
        break;
    case "light-to-temperature map" :
        if (data.length > 0) {
          state.lightToTemperature.push(parseCategory(data));
        }
        currentField$1 = "light-to-temperature map";
        break;
    case "seed-to-soil map" :
        if (data.length > 0) {
          state.seedsToSoil.push(parseCategory(data));
        }
        currentField$1 = "seed-to-soil map";
        break;
    case "seeds" :
        state.seeds = data.split(" ").filter(function (string) {
                return string.trim().length > 0;
              }).map(function (number) {
              return Belt_Option.getWithDefault(Belt_Float.fromString(number), 0.0);
            });
        currentField$1 = "seeds";
        break;
    case "soil-to-fertilizer map" :
        if (data.length > 0) {
          state.soilToFertilizer.push(parseCategory(data));
        }
        currentField$1 = "soil-to-fertilizer map";
        break;
    case "temperature-to-humidity map" :
        if (data.length > 0) {
          state.temperatureToHumidity.push(parseCategory(data));
        }
        currentField$1 = "temperature-to-humidity map";
        break;
    case "water-to-light map" :
        if (data.length > 0) {
          state.waterToLight.push(parseCategory(data));
        }
        currentField$1 = "water-to-light map";
        break;
    default:
      currentField$1 = currentField;
  }
  return [
          currentField$1,
          state
        ];
}

function map(number, map$1) {
  return map$1.reduce((function (param, param$1) {
                  var number = param[0];
                  if (param[1]) {
                    return [
                            number,
                            true
                          ];
                  }
                  var source = param$1[1];
                  if (number < source || number > source + param$1[2]) {
                    return [
                            number,
                            false
                          ];
                  } else {
                    return [
                            number + (param$1[0] - source),
                            true
                          ];
                  }
                }), [
                number,
                false
              ])[0];
}

function calculateLowestLocation(input) {
  var match = input.split("\n").filter(function (line) {
          return line.trim().length > 0;
        }).reduce(populateState, [
        "",
        {
          seeds: [],
          seedsToSoil: [],
          soilToFertilizer: [],
          fertilizerToWater: [],
          waterToLight: [],
          lightToTemperature: [],
          temperatureToHumidity: [],
          humidityToLocation: []
        }
      ]);
  var state = match[1];
  return Caml_splice_call.spliceApply(Math.min, [state.seeds.map(function (seed) {
                    return map(map(map(map(map(map(map(seed, state.seedsToSoil), state.soilToFertilizer), state.fertilizerToWater), state.waterToLight), state.lightToTemperature), state.temperatureToHumidity), state.humidityToLocation);
                  })]);
}

console.log(calculateLowestLocation(Utilities.input));

var input = Utilities.input;

var input2 = "seeds: 79 14 55 13\n\nseed-to-soil map:\n50 98 2\n52 50 48\n\nsoil-to-fertilizer map:\n0 15 37\n37 52 2\n39 0 15\n\nfertilizer-to-water map:\n49 53 8\n0 11 42\n42 0 7\n57 7 4\n\nwater-to-light map:\n88 18 7\n18 25 70\n\nlight-to-temperature map:\n45 77 23\n81 45 19\n68 64 13\n\ntemperature-to-humidity map:\n0 69 1\n1 0 69\n\nhumidity-to-location map:\n60 56 37\n56 93 4";

export {
  input ,
  input2 ,
  parseCategory ,
  populateState ,
  map ,
  calculateLowestLocation ,
}
/*  Not a pure module */
