// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Utilities from "../Utilities.bs.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var InvalidInput = /* @__PURE__ */Caml_exceptions.create("DayEightPartTwo.InvalidInput");

var map = {};

var instructions = {
  contents: ""
};

var locations = {
  contents: []
};

var count = {
  contents: 0.0
};

Utilities.input.split("\n").filter(function (line) {
        return line.trim().length > 0;
      }).forEach(function (line, index) {
      if (index === 0) {
        instructions.contents = line.trim();
        return ;
      }
      var match = line.replace(" =", "").replace(/[^A-Z ]/g, "").split(" ");
      if (match.length !== 3) {
        throw {
              RE_EXN_ID: InvalidInput,
              _1: "The input is invalid.",
              Error: new Error()
            };
      }
      var $$location = match[0];
      var left = match[1];
      var right = match[2];
      map[$$location] = [
        left,
        right
      ];
    });

locations.contents = Object.keys(map).filter(function ($$location) {
      return $$location.endsWith("A");
    });

while(!locations.contents.every(function ($$location) {
        return $$location.endsWith("Z");
      })) {
  instructions.contents.split("").forEach(function (instruction) {
        locations.contents = locations.contents.map(function ($$location) {
              var match = Belt_Option.getExn(Js_dict.get(map, $$location));
              switch (instruction) {
                case "L" :
                    return match[0];
                case "R" :
                    return match[1];
                default:
                  throw {
                        RE_EXN_ID: InvalidInput,
                        _1: "The instructions are invalid.",
                        Error: new Error()
                      };
              }
            });
        count.contents = count.contents + 1.0;
      });
};

console.log(count.contents);

var input = Utilities.input;

var input2 = "LR\n\n11A = (11B, XXX)\n11B = (XXX, 11Z)\n11Z = (11B, XXX)\n22A = (22B, XXX)\n22B = (22C, 22C)\n22C = (22Z, 22Z)\n22Z = (22B, 22B)\nXXX = (XXX, XXX)\n";

export {
  input ,
  input2 ,
  InvalidInput ,
  map ,
  instructions ,
  locations ,
  count ,
}
/*  Not a pure module */
