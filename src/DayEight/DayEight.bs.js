// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Utilities from "../Utilities.bs.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var InvalidInput = /* @__PURE__ */Caml_exceptions.create("DayEight.InvalidInput");

var map = {};

var instructions = {
  contents: ""
};

var $$location = {
  contents: "AAA"
};

var count = {
  contents: 0
};

Utilities.input.split("\n").filter(function (line) {
        return line.trim().length > 0;
      }).forEach(function (line, index) {
      if (index === 0) {
        instructions.contents = line.trim();
        return ;
      }
      var match = line.replace(" =", "").replace(/[^A-Z ]/g, "").split(" ");
      if (match.length !== 3) {
        throw {
              RE_EXN_ID: InvalidInput,
              _1: "The input is invalid.",
              Error: new Error()
            };
      }
      var $$location = match[0];
      var left = match[1];
      var right = match[2];
      map[$$location] = [
        left,
        right
      ];
    });

while($$location.contents !== "ZZZ") {
  instructions.contents.split("").forEach(function (instruction) {
        var match = Belt_Option.getExn(Js_dict.get(map, $$location.contents));
        switch (instruction) {
          case "L" :
              $$location.contents = match[0];
              break;
          case "R" :
              $$location.contents = match[1];
              break;
          default:
            throw {
                  RE_EXN_ID: InvalidInput,
                  _1: "The instructions are invalid.",
                  Error: new Error()
                };
        }
        count.contents = count.contents + 1 | 0;
      });
};

console.log(count.contents);

var input = Utilities.input;

var input2 = "LLR\n\nAAA = (BBB, BBB)\nBBB = (AAA, ZZZ)\nZZZ = (ZZZ, ZZZ)\n";

export {
  input ,
  input2 ,
  InvalidInput ,
  map ,
  instructions ,
  $$location ,
  count ,
}
/*  Not a pure module */
