// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Utilities from "../Utilities.bs.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var InvalidInput = /* @__PURE__ */Caml_exceptions.create("DaySix.InvalidInput");

var races = [];

function parse(input) {
  var times = [];
  var distances = [];
  input.split("\n").filter(function (line) {
          return line.trim().length > 0;
        }).forEach(function (data, index) {
        Caml_array.get(data.split(":"), 1).trim().split(/\s+/).forEach(function (d) {
              if (d !== undefined) {
                if (index === 0) {
                  times.push(Belt_Option.getExn(Belt_Int.fromString(d)));
                } else {
                  distances.push(Belt_Option.getExn(Belt_Int.fromString(d)));
                }
                return ;
              }
              throw {
                    RE_EXN_ID: InvalidInput,
                    _1: "The input is invalid.",
                    Error: new Error()
                  };
            });
      });
  times.forEach(function (time, index) {
        races.push({
              time: time,
              distance: Caml_array.get(distances, index)
            });
      });
}

parse(Utilities.input);

console.log(races.map(function (race) {
            var distances = [];
            for(var t = race.time - 1 | 0; t >= 1; --t){
              var speed = race.time - t | 0;
              distances.push(Math.imul(speed, t));
            }
            return distances.filter(function (distance) {
                        return distance > race.distance;
                      }).length;
          }).reduce((function (result, numberOfWins) {
            return Math.imul(result, numberOfWins);
          }), 1));

var input = Utilities.input;

var input2 = "Time:      7  15   30\nDistance:  9  40  200\n";

export {
  input ,
  input2 ,
  InvalidInput ,
  races ,
  parse ,
}
/*  Not a pure module */
