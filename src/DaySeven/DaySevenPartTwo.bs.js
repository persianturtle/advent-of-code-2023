// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Utilities from "../Utilities.bs.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var InvalidInput = /* @__PURE__ */Caml_exceptions.create("DaySevenPartTwo.InvalidInput");

var hands = Utilities.input.split("\n").filter(function (line) {
        return line.trim().length > 0;
      }).map(function (line) {
      var match = line.split(" ");
      if (match.length !== 2) {
        throw {
              RE_EXN_ID: InvalidInput,
              _1: "The input is invalid.",
              Error: new Error()
            };
      }
      var hand = match[0];
      var bid = match[1];
      return {
              hand: hand,
              bid: Belt_Option.getExn(Belt_Int.fromString(bid))
            };
    });

function mapCardToStrength(card) {
  switch (card) {
    case "2" :
        return 3;
    case "3" :
        return 4;
    case "4" :
        return 5;
    case "5" :
        return 6;
    case "6" :
        return 7;
    case "7" :
        return 8;
    case "8" :
        return 9;
    case "9" :
        return 10;
    case "A" :
        return 14;
    case "J" :
        return 2;
    case "K" :
        return 13;
    case "Q" :
        return 12;
    case "T" :
        return 11;
    default:
      throw {
            RE_EXN_ID: InvalidInput,
            _1: "The card is invalid.",
            Error: new Error()
          };
  }
}

function mapHandToStrength(hand) {
  var dict = {};
  hand.split("").forEach(function (card) {
        dict[card] = Belt_Option.getWithDefault(Js_dict.get(dict, card), 0) + 1 | 0;
      });
  var match = Js_dict.entries(dict).sort(function (param, param$1) {
        var bCard = param$1[0];
        if (param[0] === "J") {
          if (bCard === "J") {
            return 0;
          } else {
            return -1;
          }
        } else if (bCard === "J") {
          return 1;
        } else {
          return param$1[1] - param[1] | 0;
        }
      });
  var len = match.length;
  if (len >= 6) {
    return 1;
  }
  switch (len) {
    case 0 :
        return 1;
    case 1 :
        var match$1 = match[0];
        if (match$1[1] !== 5) {
          return 1;
        } else {
          return 7;
        }
    case 2 :
        var match$2 = match[0];
        if (match$2[0] === "J") {
          return 7;
        }
        var match$3 = match$2[1];
        if (match$3 !== 3) {
          if (match$3 !== 4) {
            return 1;
          } else {
            return 6;
          }
        }
        var match$4 = match[1];
        if (match$4[1] !== 2) {
          return 1;
        } else {
          return 5;
        }
    case 3 :
        var match$5 = match[0];
        if (match$5[0] === "J") {
          var a = match$5[1];
          var match$6 = match[1];
          if ((a + match$6[1] | 0) === 4) {
            return 6;
          }
          if (a === 1) {
            var match$7 = match[1];
            if (match$7[1] !== 2) {
              return 1;
            }
            var match$8 = match[2];
            if (match$8[1] !== 2) {
              return 1;
            } else {
              return 5;
            }
          }
          
        }
        var match$9 = match$5[1];
        if (match$9 !== 2) {
          if (match$9 !== 3) {
            return 1;
          } else {
            return 4;
          }
        }
        var match$10 = match[1];
        if (match$10[1] !== 2) {
          return 1;
        } else {
          return 3;
        }
        break;
    case 4 :
        var match$11 = match[0];
        if (match$11[0] === "J") {
          var match$12 = match$11[1];
          if (match$12 !== 1) {
            if (match$12 === 2) {
              var match$13 = match[1];
              if (match$13[1] === 1) {
                return 4;
              }
              
            }
            
          } else {
            var match$14 = match[1];
            if (match$14[1] !== 2) {
              return 1;
            } else {
              return 4;
            }
          }
        }
        if (match$11[1] !== 2) {
          return 1;
        } else {
          return 2;
        }
    case 5 :
        var match$15 = match[0];
        if (match$15[0] === "J" && match$15[1] === 1) {
          return 2;
        } else {
          return 1;
        }
    
  }
}

console.log(hands.sort(function (a, b) {
            var result = mapHandToStrength(a.hand) - mapHandToStrength(b.hand) | 0;
            if (result !== 0) {
              return result;
            }
            var indexRef = 0;
            var resultRef = 0;
            while(resultRef === 0 && indexRef < 5) {
              var result$1 = mapCardToStrength(a.hand.charAt(indexRef)) - mapCardToStrength(b.hand.charAt(indexRef)) | 0;
              if (result$1 !== 0) {
                resultRef = result$1;
              } else {
                indexRef = indexRef + 1 | 0;
              }
            };
            return resultRef;
          }).reduce((function (winnings, hand, index) {
            return winnings + Math.imul(hand.bid, index + 1 | 0) | 0;
          }), 0));

var input = Utilities.input;

var input2 = "32T3K 765\nT55J5 684\nKK677 28\nKTJJT 220\nQQQJA 483\n";

var input3 = "2345A 1\nQ2KJJ 13\nQ2Q2Q 19\nT3T3J 17\nT3Q33 11\n2345J 3\nJ345A 2\n32T3K 5\nT55J5 29\nKK677 7\nKTJJT 34\nQQQJA 31\nJJJJJ 37\nJAAAA 43\nAAAAJ 59\nAAAAA 61\n2AAAA 23\n2JJJJ 53\nJJJJ2 41\n";

export {
  input ,
  input2 ,
  input3 ,
  InvalidInput ,
  hands ,
  mapCardToStrength ,
  mapHandToStrength ,
}
/* hands Not a pure module */
